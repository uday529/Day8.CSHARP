Absttractuin:

App class
class appclass{

abstract Boolean AppLogin(string userName,String password);   // incompltet method
}


using System;
using System.Collections.Generic;
using System.Security.Cryptography.X509Certificates;
using System.Text;

namespace Class_Objects
{
    abstract class Appclass
    {
        public abstract Boolean AppLogin(string userName, String password);
    }
    public void PrintDetail()
    {
        Console.WriteLine("Welcome Guys");
    }
    interface Igame
    {
        void InstallGame();
    }
    class Facebook : Appclass
    {
        public override bool AppLogin(string userName, string password)
        { 
            public void InstallGame()
            {
                Console.WriteLine("GAme installedd");

            }
        }
        public void InstallGame()
        {
            Console.WriteLine("Game Installed");

        }


    }

    class Twitter : Appclass
    {
        public override bool AppLogin(string userName, string password)
        {
            if (userName == "uday" || password == "uday529")
            {

                return true;
            }
            else
            {
                return false;
            }
        }
        public void InstallGame()
        {
            Console.WriteLine("Game Installed");
        }




    }
}


Polymorphism:

Run Time Polymorpism ,runtime polymorpsim
Calculator  calculator.cs
using Class_Objects;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;

namespace Class_Objects
{
    internal class calculator
    {
        public int Add(int a,int b) 
        { 
            return a + b;

        }

        public int sub(int a, int b)
        {
            return a - b;

        }
        public int Add(int a, int b,int c)
        {
            return a + b + c ;


        }
        public int sub(int a, int b,int c)
        {
            return a - b - c;

        }
    }
    public virtual int Multipication(int x,int y)
    {
        return x * y;
    }
}

class SuperCalculator:calculator
{

}
class DeluxeCalculator : calculator
{
    pulic override int Multiplication(int x,int y)
    {
        Console.WriteLine("child class");
        return base.Multiplication(x,y);
    }
}


programs.cs

            calculator ca1=new calculator();
            ca1.Add(12,32);
            ca1.sub(23, 12);
            SuperCalculator sp1= new SuperCalculator();
            Console.WritelLine(sp1.Multiplication(10, 4));

            DeluxeCalculator dp11 = new DeluxeCalculator();
            Console.WritelLine(dp1.Multiplication(12, 3));
Collections:
int[] marks = new int[100];  // size fixed we cant change in array so we goo for collections

for working in collections and hastables we need to add
using System.Collections;

 int[] marks = new int[100];  // size fixed we cant change in array so we goo for collections

            ArrayList list= new ArrayList();

            list.Add(100);
            list.Add("Uday");
            list.Add("3");
            list.Add(88);
            list.Add("A");

            Hashtable h1=new Hashtable();
            // key value  pair we have to give the input as key value paur
// we can give any datatype in the value 
            h1.Add(1, "Uday");
            h1.Add(2, " ");
            h1.Add(3, 3);
            h1.Add(4, false);
            h1.Add(5,".");
// generic list
we should incluse the using system.
// generic list
            List<int>numbers= new List<int>();
            numbers.Add(12);
            numbers.Add(1000);
            numbers.Add(10);
            numbers.Add(34);
            numbers.Add(1);
            List<String> names = new List<String>();
            names.Add("Uday");
            names.Add("Sai");

            foreach(int num in numbers)
            {
                Console.WriteLine(num);
            }
            numbers.Sort();
            Console.WriteLine("after sorting");
            foreach (int num in numbers)
            {
                Console.WriteLine(num);
            }

// Generic Dictionary
            Dictionary <int,string>keyValuePairs=new Dictionary<int,string>();
            //keyValuePairs.Add("Uday", 90); // Error
            keyValuePairs.Add(90,"Uday");
            keyValuePairs.Add(2, "Sai");
            keyValuePairs.Add(34, "Diva");
            keyValuePairs.Add(67, "Yashwant");
            foreach(KeyValuePair<int,string> num in keyValuePairs)
            {
                Console.WriteLine(num);
            }

            foreach(int key in keyValuePairs.Keys)
            {
                Console.WriteLine(key);
            }
            Console.WriteLine("enter th key");
            int P = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine(keyValuePairs[P]);
            Console.WriteLine(keyValuePairs.ContainsKey(10));
Sorted in a order we use Sorted
// Sorted Dictionary
            SortedDictionary <int,string>keyValuePairs=new SortedDictionary<int,string>();
            //keyValuePairs.Add("Uday", 90); // Error
            keyValuePairs.Add(90,"Uday");
            keyValuePairs.Add(2, "Sai");
            keyValuePairs.Add(34, "Diva");
            keyValuePairs.Add(67, "Yaswant");
            foreach(KeyValuePair<int,string> num in keyValuePairs)
            {
                Console.WriteLine(num);
            }
// sorted set would not allow the duplicate values.

----------------------------------------------------------------------
Exception Handling:

Console.WriteLine("enter the nUmber");
            try
            {
                int n = int.Parse(Console.ReadLine());
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

// divide by zero
Console.WriteLine("enter the nUmber");
            try
            {
                int n1 = int.Parse(Console.ReadLine());
                int n2 = int.Parse(Console.ReadLine());
                Console.WriteLine(n1 / n2);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
